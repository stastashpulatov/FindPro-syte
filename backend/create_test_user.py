"""
Script to create a test user for development
"""
from app.db.session import SessionLocal
from app.models import User, Category
from app.core.security import get_password_hash

def create_test_data():
    db = SessionLocal()
    
    try:
        # Create test user
        test_user = db.query(User).filter(User.email == "test@example.com").first()
        if not test_user:
            test_user = User(
                email="test@example.com",
                hashed_password=get_password_hash("password123"),
                full_name="Test User",
                is_active=True,
                is_superuser=False
            )
            db.add(test_user)
            print("‚úÖ Created test user: test@example.com / password123")
        else:
            print("‚ÑπÔ∏è  Test user already exists")
        
        # Create admin user
        admin_user = db.query(User).filter(User.email == "admin@example.com").first()
        if not admin_user:
            admin_user = User(
                email="admin@example.com",
                hashed_password=get_password_hash("admin123"),
                full_name="Admin User",
                is_active=True,
                is_superuser=True
            )
            db.add(admin_user)
            print("‚úÖ Created admin user: admin@example.com / admin123")
        else:
            print("‚ÑπÔ∏è  Admin user already exists")
        
        # Create categories
        categories_data = [
            {"name": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "description": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", "icon": "üèóÔ∏è"},
            {"name": "–†–µ–º–æ–Ω—Ç", "description": "–†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä –∏ –¥–æ–º–æ–≤", "icon": "üîß"},
            {"name": "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "description": "–°–∞–Ω—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "icon": "üö∞"},
            {"name": "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "description": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "icon": "‚ö°"},
            {"name": "–£–±–æ—Ä–∫–∞", "description": "–ö–ª–∏–Ω–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏", "icon": "üßπ"},
            {"name": "–õ–∞–Ω–¥—à–∞—Ñ—Ç", "description": "–õ–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω", "icon": "üå≥"},
            {"name": "IT-—É—Å–ª—É–≥–∏", "description": "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –ø–æ–º–æ—â—å", "icon": "üíª"},
            {"name": "–ü–µ—Ä–µ–≤–æ–∑–∫–∏", "description": "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏", "icon": "üöö"},
        ]
        
        for cat_data in categories_data:
            existing_cat = db.query(Category).filter(Category.name == cat_data["name"]).first()
            if not existing_cat:
                category = Category(**cat_data)
                db.add(category)
                print(f"‚úÖ Created category: {cat_data['name']}")
        
        db.commit()
        print("\n‚úÖ Test data created successfully!")
        print("\nüìù You can now login with:")
        print("   User: test@example.com / password123")
        print("   Admin: admin@example.com / admin123")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_test_data()
